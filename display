#!/bin/bash

# The chat file
file="$1"

# Modifiers
# The number of lines to display
display_size="$2"

# If 0, show as many lines as they fit in the screen
if [ $display_size -eq 0 ]; then
    size=$(tput lines)
fi

# If size is still undefined, default to 20
if [ -z "$display_size" ]; then
    display_size=20
fi

size_file=$(mktemp)
echo $display_size > $size_file

# Will show higger lines/older messages, stored in a tmp file for global access
upread_file=$(mktemp)
echo 1 > "$upread_file"

# Shows or hides the number of each line
display_lines_file=$(mktemp)
echo "$3" > "$display_lines_file"

function refresh() {
    clear
    
    # Read and show the chat
    if [ -f "$file" ]; then
        upread=$(cat "$upread_file")
        size=$(cat "$size_file")
        display_lines=$(cat "$display_lines_file")

        let position_bottom=$upread*$size

        if [ -z "$position_bottom" ]; then
            echo "Woops, something went wrong. If you have a settings.yml, make sure the file is in LF and not CRLF." 1>&2
            echo "To fix this, you can run \"sed -i 's/\r$//' settings.yml\" in your shell." 1>&2
            read -s -n 1
            exit 1
        fi

        line_number=1
        if [ $display_lines -eq 1 ]; then
            total_lines=$(wc -l < "$file")
            let line_number=$total_lines-$position_bottom
            if [ $line_number -le 0 ]; then
                line_number=1
            fi
        fi

        while read -r line; do
            # Prevent echoing empty lines, should not happen
            if [ -z "$line" ]; then
                continue
            fi

            trailing_new_line_regex="\n$"
            while [[ "$line" =~ $trailing_new_line_regex ]]; do
                line="${line::-2}"
            done

            if [ $display_lines -eq 1 ]; then
                echo -n "$line_number "
                let line_number=$line_number+1
            fi

            echo -e "$line"
        done < "$file" | tail -n $position_bottom | head -n $size
    else
        echo "El chat desapareció inesperadamente"
        exit 2
    fi
}

function auto() {
    initial_count=0
    while true; do
        count=$(wc -l < $file)

        if [ $count -gt $initial_count ]; then
            initial_count=$count
            refresh
            if [ $? -eq 2 ]; then break; fi
        fi

        sleep 5
    done
}

function manual() {
    while true; do
        tmux wait REFRESH
        refresh
    done
}

function help() {
    while true; do
        tmux wait SHOW_HELP
        echo "
exit - Salir del chat
/up - Subir una página
/down - Bajar una página
/top - Ir al principio
/bottom - Ir al final
/lines - Mostrar el número de línea de cada mensaje
/react [n] [emoji] - Reaccionar con un emoji al mensaje en la línea n
/[r/g/c/p][mensaje] - Cambia el color del mensaje
//[mensaje] - Cambia el color del texto al color original
/help - Muestra este mensaje de ayuda
        "
        tmux wait HIDE_HELP
        refresh
    done
}

function up() {
    while true; do
        tmux wait UP

        upread=$(cat $upread_file)
        let space_left=$(wc -l < "$file")-$upread*$size

        if [ $space_left -gt 0 ]; then
            let upread=$upread+1
            echo $upread > $upread_file
            refresh
        fi
    done
}

function down() {
    while true; do
        tmux wait DOWN

        upread=$(cat $upread_file)

        if [ $upread -gt 1 ]; then
            let upread=$upread-1
            echo $upread > $upread_file
            refresh
        fi
    done
}

function top() {
    while true; do
        tmux wait TOP
        size=$(cat $size_file)
        let upread=$(wc -l < "$file")/$size+1
        echo $upread > $upread_file
        refresh
    done
}

function bottom() {
    while true; do
        tmux wait BOTTOM
        echo 1 > $upread_file
        refresh
    done
}

function lines() {
    while true; do
        tmux wait LINES

        lines=$(cat "$display_lines_file")

        if [ $lines -eq 0 ]; then
            lines=1
        else
            lines=0
        fi
        
        echo $lines > $display_lines_file
        refresh
    done
}

# Check if there's any tmux session running
auto &
manual &
help &
up &
down &
top &
bottom &
lines &

while true; do
    read -n 1 -s key
    if [ "$key" = "/" ]; then
        read -e -i "/" input

        resize_regex="^/resize ([1-9][0-9]*)$"

        if [ "$input" = "/update" ]; then
            echo -e "Lol, not implemented ;)"
        
        elif [[ "$input" =~ $resize_regex ]]; then
            size=${input#* }
            echo $size > $size_file
            refresh
        
        elif [ "$input" = "/refresh" ]; then
            refresh

        fi
    else
        break
    fi
done
