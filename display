#!/bin/bash

# The chat name, file and server
chat="$1"
file="$2"
server="$3"

# Modifiers
# The number of lines to display
display_size="$4"

# If 0, show as many lines as they fit in the screen
if [ "$display_size" -eq 0 ]; then
    display_size=$(tput lines)
fi

# If size is still undefined, default to 20
if [ -z "$display_size" ] || [ "$display_size" -le 0 ]; then
    display_size=20
fi

size_file=$(mktemp)
echo $display_size > $size_file

# Will show higger lines/older messages, stored in a tmp file for global access
upread_file=$(mktemp)
echo 1 > "$upread_file"

# Shows or hides the number of each line
display_lines_file=$(mktemp)
echo "$5" > "$display_lines_file"

# Save the auto refresh rate
refresh_rate_file=$(mktemp)
echo "$6" > "$refresh_rate_file"

# The number of lines of the chat file
chat_lines_file=$(mktemp)
echo $(wc -l < "$file") > "$chat_lines_file"

function refresh() {
    if [ ! -f "$file" ]; then
        echo "El chat desapareci√≥ inesperadamente"
        exit 2
    fi

    initial_count=$(cat "$chat_lines_file")
    count=$(wc -l < $file)
    
    # Read from the server and show the chat
    if [ -z "$1" ]; then # If the function is called with arguments, only do a local refresh
        curl -S "$server/$chat?$count" 2> /dev/null >> "$file"
    fi

    if [ $count -gt $initial_count ]; then
        echo $count > "$chat_lines_file"
        
        clear

        upread=$(cat "$upread_file")
        size=$(cat "$size_file")
        display_lines=$(cat "$display_lines_file")

        let position_bottom=$upread*$size

        if [ "$position_bottom" -lt 1 ]; then
            echo "Woops, something went wrong. If you have a settings.yml, make sure the file is in LF and not CRLF." 1>&2
            echo "To fix this, you can run \"sed -i 's/\r$//' settings.yml\" in your shell." 1>&2
            read -s -n 1
            exit 1
        fi

        line_number=0
        
    #     echo "upread: $upread
    # size: $size
    # position_bottom (upread * size): $position_bottom
    # total_lines: $total_lines
    # line_number (total_lines - position_bottom): $line_number" > "./debug.log"

        while read -r line; do
            # Prevent echoing empty lines, should not happen
            if [ -z "$line" ]; then
                continue
            fi

            let line_number=$line_number+1

            trailing_new_line_regex="\n$"
            while [[ "$line" =~ $trailing_new_line_regex ]]; do
                line="${line::-2}"
            done

            # If you can't fix it server side, fix it on user's side
            if [ "$line" = "(null)" ]; then
                continue
            fi

            # echo "$line_number $line" >> "./debug.log"
            if [ $display_lines -eq 1 ] && [ $line_number -ne 1 ]; then
                echo -n "$line_number "
            fi

            echo -e "$line"
        done < "$file" | tail -n $position_bottom | head -n $size
    fi

}

function auto() {
    initial_count=0

    while true; do
        sleep_time=$(cat "$refresh_rate_file")

        if [ $sleep_time -eq 0 ]; then
            sleep 60
            continue
        fi

        # count=$(wc -l < $file)

        # if [ $count -gt $initial_count ]; then
        #     initial_count=$count
        #     refresh
        #     if [ $? -eq 2 ]; then break; fi
        # fi

        refresh

        sleep $sleep_time
    done
}

function manual() {
    while true; do
        tmux wait REFRESH
        refresh
    done
}

function help() {
    while true; do
        tmux wait SHOW_HELP
        clear
        bash ./help
        tmux wait HIDE_HELP
        refresh "false"
    done
}

function up() {
    while true; do
        tmux wait UP

        size=$(cat "$size_file")
        upread=$(cat $upread_file)

        let space_left=$(wc -l < "$file")-$upread*$size

        if [ $space_left -gt 0 ]; then
            let upread=$upread+1
            echo $upread > $upread_file
            refresh "false"
        fi
    done
}

function down() {
    while true; do
        tmux wait DOWN

        upread=$(cat $upread_file)

        if [ $upread -gt 1 ]; then
            let upread=$upread-1
            echo $upread > $upread_file
            refresh "false"
        fi
    done
}

function top() {
    while true; do
        tmux wait TOP
        size=$(cat $size_file)
        let upread=$(wc -l < "$file")/$size+1
        echo $upread > $upread_file
        refresh "false"
    done
}

function bottom() {
    while true; do
        tmux wait BOTTOM
        echo 1 > $upread_file
        refresh "false"
    done
}

function lines() {
    while true; do
        tmux wait LINES

        lines=$(cat "$display_lines_file")

        if [ $lines -eq 0 ]; then
            lines=1
        else
            lines=0
        fi
        
        echo $lines > $display_lines_file
        refresh "false"
    done
}

auto &
manual &
help &
up &
down &
top &
bottom &
lines &

while true; do
    read -n 1 -s key
    if [ "$key" = "/" ]; then
        read -e -i "/" input

        resize_regex="^/resize( [1-9][0-9]*)?$"
        rate_regex="^/rate [0-9]+$"

        if [ "$input" = "/update" ]; then
            echo -e "Lol, not implemented ;)"
        
        elif [[ "$input" =~ $resize_regex ]]; then
            size="${input//\/resize/}"
            if [ -z "$size" ]; then
                size=$(tput lines)
            fi

            echo $size > $size_file
            refresh

        elif [[ "$input" =~ $rate_regex ]]; then
            old_rate=$(cat "$refresh_rate_file")
            rate="${input//\/rate/}"
            echo $rate > $refresh_rate_file
            refresh
            if [ $rate -eq 0 ]; then
                echo "Auto refresh disabled"
            elif [ $old_rate -eq 0 ]; then
                echo "The new refresh rate will be applied in less than a minute."
            fi
        
        elif [ "$input" = "/refresh" ]; then
            refresh

        fi
    else
        break
    fi
done
