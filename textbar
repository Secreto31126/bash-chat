#!/bin/bash

name="$1"
chat="$2"
server="$3"
color="$4"

BLACK='\033[0;30m'
BLACK_BOLD='\033[1;30m'
RED='\033[0;31m'
RED_BOLD='\033[1;31m'
GREEN='\033[0;32m'
GREEN_BOLD='\033[1;32m'
PURPLE='\033[0;35m'
PURPLE_BOLD='\033[1;35m'
CYAN='\033[0;36m'
CYAN_BOLD='\033[1;36m'
INVISIBLE='\033[8m'
NC='\033[0m' # No Color

function send_message() {
    curl -s -d "$1" -X POST "$server/$chat" > ./debug.log
}

function color() {
    i=$1
    i="${i//\/\//$NC}"
    i="${i//\/b/$BLACK}"
    i="${i//\/B/$BLACK_BOLD}"
    i="${i//\/r/$RED}"
    i="${i//\/R/$RED_BOLD}"
    i="${i//\/g/$GREEN}"
    i="${i//\/G/$GREEN_BOLD}"
    i="${i//\/p/$PURPLE}"
    i="${i//\/P/$PURPLE_BOLD}"
    i="${i//\/c/$CYAN}"
    i="${i//\/C/$CYAN_BOLD}"
    echo $i$NC
}

function rainbow() {
    sad=$1
    
    for ((i=0; i<${#sad}; i++)); do
        if [ ${sad:$i:1} = " " ]; then
            rainbowed+=" "
        else
            modulo=$(($i % 5))
            case $modulo in
                0) rainbowed+="/r${sad:$i:1}" ;;
                1) rainbowed+="/g${sad:$i:1}" ;;
                2) rainbowed+="/c${sad:$i:1}" ;;
                3) rainbowed+="/p${sad:$i:1}" ;;
                4) rainbowed+="//${sad:$i:1}" ;;
            esac
        fi
    done

    echo $rainbowed
}

function cool() {
    string=$1
    string=$(color "$string")
    echo $string
}

function main() {
    while true; do
        clear

        read -e -p "$name: " message
        history -s "$message"

        reaction_regex="^/react ([2-9]|[1-9][0-9]+) .{1,2}$"
        rainbow_regex="^/rainbow .*$"
        delete_regex="^/deleteAll( [Yy])?$"

        if [ "$message" = "exit" ]; then
            break
        
        elif [ "$message" = "/help" ]; then
            tmux wait -S SHOW_HELP
            clear
            read -n 1 -s -p "Press any key to continue"
            tmux wait -S HIDE_HELP
            continue
        
        elif [ "$message" = "/up" ]; then
            tmux wait -S UP
            continue
        
        elif [ "$message" = "/down" ]; then
            tmux wait -S DOWN
            continue
        
        elif [ "$message" = "/top" ]; then
            tmux wait -S TOP
            continue
        
        elif [ "$message" = "/bottom" ]; then
            tmux wait -S BOTTOM
            continue
        
        elif [ "$message" = "/lines" ]; then
            tmux wait -S LINES
            continue
        
        elif [[ "$message" =~ $reaction_regex ]]; then
            echo "Not implemented for online branch"

            # number=$(echo $message | awk '{print $2}')
            # reaction=$(echo $message | awk '{print $3}')

            # length=${#reaction}
            # if [ $length -eq 1 ] || [ $length -eq 2 ]; then
            #     sed -i "${number}s/$/$reaction /" $path
            # else
            #     echo -n "Invalid reaction, it must be 1 or 2 characters long"
            #     read -n 1 -s
            # fi
            # continue
        
        elif [[ "$message" =~ $rainbow_regex ]]; then
            message="${message//\/rainbow /}"
            message=$(rainbow "$message")
        
        elif [[ "$message" =~ $delete_regex ]]; then
            echo "Not implemented for online branch"

            # delete=1
            # if [ "$message" = "/deleteAll" ]; then # The simplest way to check if it doesn't have a second argument
            #     clear
            #     echo -n "You are about to delete the whole chat history for everyone. "
            #     read -p "Are you sure you want to proceed? (y/N) " -n 1 -r
            #     if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            #         delete=0
            #     fi
            # fi

            # # This won't be run if the second argument is not "[yY]" because it wouldn't match the first regex
            # if [ $delete -eq 1 ]; then
            #     header=$(head -n 1 $path)
            #     echo $header > $path
            #     message="Chat history /rdeleted//"
            # else
            #     echo -ne "\nCanceled."
            #     read -n 1 -s
            #     continue
            # fi
        
        elif [ "$message" = "/display" ]; then
            # tmux select-pane -t "display"
            read -n 1 -s -p "Ctrl + B -> (arrow up) -> /[command]"
            continue
        
        fi

        # If string is not empty, write to chat
        if [ -n "$message" ]; then
            message=$(cool "$color$name//: $message//")
            send_message "$message"
        fi

        # Send a trigger to the chat window to refresh
        tmux wait -S REFRESH
    done
}

send_message "$(color "$color$name//: Joined the chat")"

main

send_message "$(color "$color$name//: Left the chat")"
