#!/bin/bash

name="$1"
path="$2"
color="$3"

BLACK='\033[0;30m'
BLACK_BOLD='\033[1;30m'
RED='\033[0;31m'
RED_BOLD='\033[1;31m'
GREEN='\033[0;32m'
GREEN_BOLD='\033[1;32m'
PURPLE='\033[0;35m'
PURPLE_BOLD='\033[1;35m'
CYAN='\033[0;36m'
CYAN_BOLD='\033[1;36m'
INVISIBLE='\033[8m'
NC='\033[0m' # No Color

function color() {
    i=$1
    i="${i//\/\//$NC}"
    i="${i//\/b/$BLACK}"
    i="${i//\/B/$BLACK_BOLD}"
    i="${i//\/r/$RED}"
    i="${i//\/R/$RED_BOLD}"
    i="${i//\/g/$GREEN}"
    i="${i//\/G/$GREEN_BOLD}"
    i="${i//\/p/$PURPLE}"
    i="${i//\/P/$PURPLE_BOLD}"
    i="${i//\/c/$CYAN}"
    i="${i//\/C/$CYAN_BOLD}"
    echo $i$NC
}

function rainbow() {
    sad=$1
    
    for ((i=0; i<${#sad}; i++)); do
        if [ ${sad:$i:1} = " " ]; then
            rainbowed+=" "
        else
            modulo=$(($i % 5))
            case $modulo in
                0) rainbowed+="/r${sad:$i:1}" ;;
                1) rainbowed+="/g${sad:$i:1}" ;;
                2) rainbowed+="/c${sad:$i:1}" ;;
                3) rainbowed+="/p${sad:$i:1}" ;;
                4) rainbowed+="//${sad:$i:1}" ;;
            esac
        fi
    done

    echo $rainbowed
}

function cool() {
    string=$1
    string=$(color "$string")
    echo $string
}

# Moddifiers
update=0
insecure=0

function main() {
    while true; do
        clear

        read -e -p "$name: " message
        history -s "$message"

        rainbow_regex="/rainbow *"
        reaction_regex="^/react ([2-9]|[1-9][0-9]+) .+$"

        if [ "$message" = "exit" ]; then
            break
        
        elif [ "$message" = "/help" ]; then
            tmux wait -S SHOW_HELP
            clear
            read -n 1 -s -p "Press any key to continue"
            tmux wait -S HIDE_HELP
            continue
        
        elif [ "$message" = "/up" ]; then
            tmux wait -S UP
            continue
        
        elif [ "$message" = "/down" ]; then
            tmux wait -S DOWN
            continue
        
        elif [ "$message" = "/top" ]; then
            tmux wait -S TOP
            continue
        
        elif [ "$message" = "/bottom" ]; then
            tmux wait -S BOTTOM
            continue
        
        elif [[ "$message" =~ $reaction_regex ]]; then
            number=$(echo $message | awk '{print $2}')
            reaction=$(echo $message | awk '{print $3}')
            is_emoji="true" # $(node emoji.js "$reaction")
            if [ "$is_emoji" = "true" ]; then
                sed -i "${number}s/$/$reaction/" $path
            fi
            continue
        
        elif [[ "$message" =~ $rainbow_regex ]]; then
            message="${message/"/rainbow "/}"
            message=$(rainbow "$message")
        
        elif [ "$message" = "/deleteAll" ]; then
            clear

            echo -n "You are about to delete the whole chat history for everyone. "
            read -p "Are you sure you want to proceed? (y/N) " -n 1 -r

            if [[ $REPLY =~ ^[Yy]$ ]]; then
                header=$(head -n 1 $path)
                echo $header > $path
                message="Chat history /rdeleted//"
            else
                echo -ne "\nCanceled."
                read -n 1 -s
                continue
            fi

        elif [ "$message" = "/deleteAll Y" ]; then
            header=$(head -n 1 $path)
            echo $header > $path
            message="Chat history /rdeleted//"
        
        elif [ "$message" = "/update" ]; then
            update=1
            break
        
        elif [ "$message" = "/insecure" ]; then
            echo "Ctrl + B -> k -> /insecure"
            read -n 1 -s
            continue
        
        fi

        # If string is not empty, write to chat
        if [ -n "$message" ]; then
            message=$(cool "$color$name//: $message")
            echo "$message$NC\\n" >> $path
        fi

        # Send a trigger to the chat window to refresh
        tmux wait -S REFRESH
    done
}

echo "$(color "$color$name//: Joined the chat")\\n" >> $path

main

if [ -f $path ]; then
    echo "$(color "$color$name//: Left the chat")\\n" >> $path
fi

if [ $update -eq 1 ]; then
    # $0 $name $path
    # tmux wait -S UPDATE
    echo "Deprecated :)"
fi
